{"version":3,"sources":["script.js"],"names":["console","log","toggleButton","document","querySelector","currentTheme","localStorage","getItem","documentElement","setAttribute","checked","window","matchMedia","matches","addEventListener","getAttribute","setItem","input","getElementById","taskInput","taskInput2","inputHelper","autoSizeInput","element","style","height","concat","scrollHeight","textContent","value","length","checkEnter","event","key","preventDefault","submit"],"mappings":"AAAA,aAAAA,QAAQC,IAAI,gBAIZ,IAAMC,aAAeC,SAASC,cAAc,gBACtCC,aAAeC,aAAaC,QAAQ,SAGtCF,cACFF,SAASK,gBAAgBC,aAAa,aAAcJ,cAC/B,SAAjBA,eACFH,aAAaQ,SAAU,IAIrBC,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCC,SACzEV,SAASK,gBAAgBC,aAAa,aAAc,QACpDP,aAAaQ,SAAU,GAEvBP,SAASK,gBAAgBC,aAAa,aAAc,SAKxDP,aAAaY,iBAAiB,SAAS,WAKhB,UAHFX,SAASK,gBAAgBO,aAAa,eAIvDZ,SAASK,gBAAgBC,aAAa,aAAc,QACpDH,aAAaU,QAAQ,QAAS,UAE9Bb,SAASK,gBAAgBC,aAAa,aAAc,SACpDH,aAAaU,QAAQ,QAAS,SAElC,IAGA,IAAMC,MAAQd,SAASe,eAAe,YAChCC,UAAYhB,SAASe,eAAe,oBACpCE,WAAajB,SAASe,eAAe,oBACrCG,YAAclB,SAASe,eAAe,gBAEtCI,cAAgB,SAACC,GACrBA,EAAQC,MAAMC,OAAS,OACvBF,EAAQC,MAAMC,OAAM,GAAAC,OAAMH,EAAQI,aAAY,MAC9CN,YAAYO,YAAW,GAAAF,OAAMH,EAAQM,MAAMC,OAAM,sBACnD,EAcA,SAASC,WAAWC,GACE,UAAdA,EAAMC,MACRD,EAAME,iBACN/B,SAASe,eAAe,aAAaiB,SAE3C,CAjBAlB,MAAMH,iBAAiB,SAAS,WAC9BQ,cAAcL,MAChB,IAEAE,UAAUL,iBAAiB,SAAS,WAClCQ,cAAcH,UAChB,IAEAC,WAAWN,iBAAiB,SAAS,WACjCQ,cAAcF,WAChB","file":"script.js","sourcesContent":["console.log('pieczareczki')\r\n//DARK&LIGHT MODE\r\n\r\n// Get the toggle button and set its initial state\r\nconst toggleButton = document.querySelector(\"#themeButton\");\r\nconst currentTheme = localStorage.getItem(\"theme\");\r\n\r\n// Check if user has explicitly set a theme using the toggle button\r\nif (currentTheme) {\r\n  document.documentElement.setAttribute(\"data-theme\", currentTheme);\r\n  if (currentTheme === \"dark\") {\r\n    toggleButton.checked = true;\r\n  }\r\n} else {\r\n  // If no theme has been set, use the user's color scheme preference\r\n  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n    document.documentElement.setAttribute('data-theme', 'dark');\r\n    toggleButton.checked = true;\r\n  } else {\r\n    document.documentElement.setAttribute('data-theme', 'light');\r\n  }\r\n}\r\n\r\n// Add event listener to toggle button\r\ntoggleButton.addEventListener(\"click\", function () {\r\n  // Get the current theme mode\r\n  let currentTheme = document.documentElement.getAttribute(\"data-theme\");\r\n\r\n  // Toggle the theme mode and update the data-theme attribute\r\n  if (currentTheme === \"light\") {\r\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\r\n    localStorage.setItem(\"theme\", \"dark\");\r\n  } else {\r\n    document.documentElement.setAttribute(\"data-theme\", \"light\");\r\n    localStorage.setItem(\"theme\", \"light\");\r\n  }\r\n});\r\n\r\n// AUTO SIZES\r\nconst input = document.getElementById('new-todo');\r\nconst taskInput = document.getElementById('taskDescription1');\r\nconst taskInput2 = document.getElementById('taskDescription2');\r\nconst inputHelper = document.getElementById('input-helper');\r\n\r\nconst autoSizeInput = (element) => {\r\n  element.style.height = 'auto';\r\n  element.style.height = `${element.scrollHeight}px`;\r\n  inputHelper.textContent = `${element.value.length} characters entered`;\r\n};\r\n\r\ninput.addEventListener('input', () => {\r\n  autoSizeInput(input);\r\n});\r\n\r\ntaskInput.addEventListener('input', () => {\r\n  autoSizeInput(taskInput);\r\n});\r\n\r\ntaskInput2.addEventListener('input', () => {\r\n    autoSizeInput(taskInput2);\r\n  });\r\n\r\nfunction checkEnter(event) {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      document.getElementById(\"task-form\").submit();\r\n    }\r\n}\r\n\r\n\r\n"]}