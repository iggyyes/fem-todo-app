{"version":3,"sources":["script.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","console","log","window","addEventListener","draggedItem","tasks","JSON","parse","localStorage","getItem","newTaskForm","document","getElementById","textArea","taskList","querySelector","taskCount","clearCompletedBtn","allRadioBtn","activeRadioBtn","completedRadioBtn","todoFilterRadios","querySelectorAll","taskItemClass","taskTextareaClass","autoSizeInput","element","style","height","concat","scrollHeight","displayTasks","innerHTML","map","task","index","taskId","createdAt","taskItem","createElement","classList","add","draggable","preventDefault","remove","droppedItem","droppedIndex","indexOf","draggedIndex","setItem","stringify","taskCheckbox","type","checked","id","setAttribute","taskLabel","htmlFor","taskTextarea","contentEditable","rows","textContent","content","taskDeleteBtn","appendChild","target","filterTasks","renderTaskCount","splice","elements","Date","getTime","push","reset","incompleteTaskCount","filter","taskString","innerText","filteredTasks","children","_step","_iterator","display","_step2","_iterator2","_step3","_iterator3","event","closest","key","dispatchEvent","Event","_step4","_iterator4","toggleButton","currentTheme","matchMedia","matches","documentElement","handleToggleTheme"],"mappings":"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","file":"script.js","sourcesContent":["\r\n\r\nconsole.log('pieczareczki')\r\n//dark/light mode\r\n//local storage\r\n//eventlistener to textbox\r\n//submit to list on keydown enter\r\n//addtask html/css markup\r\n//autosizing\r\n//eventlistener delete button\r\n//saving/editing/saving checked state\r\n//items left\r\n//clear completed\r\n//all active completed filter\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n  let tasks = getTasksFromLocalStorage();\r\n  let draggedItem; // Add this line\r\n  \r\n  const newTaskForm = document.getElementById('task-form');\r\n  const textArea = document.getElementById('new-todo');\r\n  const taskList = document.querySelector('.todo__tasks');\r\n\r\n  const taskCount = document.getElementById('todoTaskCount');\r\n  const clearCompletedBtn = document.querySelector('.clearButton');\r\n\r\n  const allRadioBtn = document.getElementById('all');\r\n  const activeRadioBtn = document.getElementById('active');\r\n  const completedRadioBtn = document.getElementById('completed');\r\n  \r\n  const todoFilterRadios = document.querySelectorAll('.todo__filter input[type=\"radio\"]');\r\n\r\n  const taskDeleteBtnClass = 'deleteButton';\r\n  const taskItemClass = 'todo__task';\r\n  const taskCheckboxClass = 'sr-only';\r\n  const taskLabelClass = 'customCheckbox';\r\n  const taskTextareaClass = 'taskDescription';\r\n  const taskTextareaRows = 1;\r\n  const taskDeleteBtnLabel = 'Delete todo task';\r\n\r\n  const autoSizeInput = element => {\r\n    element.style.height = 'auto';\r\n    element.style.height = `${element.scrollHeight}px`;\r\n  };\r\n\r\n  newTaskForm.addEventListener('submit', e => {\r\n    e.preventDefault();\r\n    \r\n    const task = {\r\n      content: e.target.elements.content.value,\r\n      done: false,\r\n      createdAt: new Date().getTime()\r\n    }\r\n\r\n    tasks.push(task);\r\n\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n\r\n    e.target.reset();\r\n    autoSizeInput(textArea);\r\n\r\n\r\n\r\n    displayTasks();\r\n  });\r\n\r\n  function displayTasks() {\r\n    taskList.innerHTML = '';\r\n    tasks.map((task, index) => {\r\n      const taskId = `${task.createdAt}`;\r\n\r\n      const taskItem = document.createElement('li');\r\n      taskItem.classList.add(taskItemClass, 'flex');\r\n      taskItem.draggable = true; // enable dragging\r\n\r\n      //DRAG AND DROPf\r\n      taskItem.addEventListener('dragstart', () => {\r\n        draggedItem = task;\r\n        taskItem.classList.add('dragged');\r\n      });\r\n  \r\n      taskItem.addEventListener('dragover', e => {\r\n        e.preventDefault();\r\n        taskItem.classList.add('hovered');\r\n      });\r\n  \r\n      taskItem.addEventListener('dragleave', () => {\r\n        taskItem.classList.remove('hovered');\r\n      });\r\n  \r\n      taskItem.addEventListener('drop', () => {\r\n        const droppedItem = task;\r\n        const droppedIndex = tasks.indexOf(droppedItem);\r\n        const draggedIndex = tasks.indexOf(draggedItem);\r\n  \r\n        tasks[draggedIndex] = droppedItem;\r\n        tasks[droppedIndex] = draggedItem;\r\n  \r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n        displayTasks();\r\n      });\r\n\r\n      //finish\r\n\r\n      const taskCheckbox = document.createElement('input');\r\n      taskCheckbox.type = 'checkbox';\r\n      taskCheckbox.checked = task.done;\r\n      taskCheckbox.classList.add(taskCheckboxClass);\r\n      taskCheckbox.id = taskId;\r\n      taskCheckbox.setAttribute('aria-checked', false);\r\n\r\n      const taskLabel = document.createElement('label');\r\n      taskLabel.htmlFor = taskId;\r\n      taskLabel.classList.add(taskLabelClass);\r\n\r\n      const taskTextarea = document.createElement('textarea');\r\n      taskTextarea.classList.add(taskTextareaClass);\r\n      taskTextarea.id = taskId;\r\n      taskTextarea.contentEditable = true;\r\n      taskTextarea.rows = taskTextareaRows;\r\n      taskTextarea.setAttribute('aria-label', `Task ${tasks.length + 1} description`);\r\n\r\n      taskTextarea.textContent = task.content;\r\n\r\n\r\n      const taskDeleteBtn = document.createElement('button');\r\n      taskDeleteBtn.classList.add(taskDeleteBtnClass);\r\n      taskDeleteBtn.type = 'button';\r\n      taskDeleteBtn.setAttribute('aria-label', taskDeleteBtnLabel);\r\n\r\n      taskLabel.appendChild(taskTextarea);\r\n      taskItem.appendChild(taskCheckbox);\r\n      taskItem.appendChild(taskLabel);\r\n      taskItem.appendChild(taskDeleteBtn);\r\n      taskList.appendChild(taskItem);\r\n      \r\n      taskCheckbox.addEventListener('change', (e) => {\r\n        e.preventDefault();\r\n        task.done = e.target.checked;\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n\r\n        // displayTasks()\r\n        filterTasks();\r\n        renderTaskCount();\r\n        \r\n      });\r\n\r\n      taskDeleteBtn.addEventListener('click', (e) => {\r\n        tasks.splice(index, 1);\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n\r\n        renderTaskCount();\r\n        displayTasks();\r\n      });\r\n\r\n      //responsible for editing added tasks\r\n      taskTextarea.addEventListener('input', (e) => {\r\n        task.content = e.target.value;\r\n        localStorage.setItem('tasks', JSON.stringify(tasks));\r\n      });\r\n      \r\n\r\n\r\n      autoSizeInput(taskTextarea)\r\n      renderTaskCount();\r\n\r\n    });\r\n  };\r\n\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      newTaskForm.dispatchEvent(new Event('submit'));\r\n    }\r\n  };\r\n\r\n  newTaskForm.addEventListener('input', () => autoSizeInput(textArea));\r\n  taskList.addEventListener('input', event => autoSizeInput(event.target.closest(`.${taskItemClass}`).querySelector(`.${taskTextareaClass}`)));\r\n  textArea.addEventListener('keydown', handleKeyDown);\r\n  \r\n\r\n  // Retrieve tasks from local storage\r\n  function getTasksFromLocalStorage() {\r\n    return JSON.parse(localStorage.getItem('tasks')) || [];\r\n  }\r\n\r\n  function renderTaskCount() {\r\n    const incompleteTasks = tasks.filter(task => !task.done);\r\n    const incompleteTaskCount = incompleteTasks.length;\r\n    const taskString = incompleteTaskCount === 1 ? 'item' : 'items';\r\n    taskCount.innerText = `${incompleteTaskCount} ${taskString} left`;\r\n  };\r\n\r\n  \r\n  clearCompletedBtn.addEventListener('click', () => {\r\n    tasks = tasks.filter(task => !task.done);\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    renderTaskCount();\r\n    displayTasks();\r\n  });\r\n\r\n  \r\n  function filterTasks() {\r\n    const filteredTasks = taskList.children;\r\n  \r\n    if (allRadioBtn.checked) {\r\n      for (let task of filteredTasks) {\r\n        task.style.display = 'block';\r\n      }\r\n    } else if (activeRadioBtn.checked) {\r\n      for (let task of filteredTasks) {\r\n        if (task.querySelector('.sr-only').checked) {\r\n          task.style.display = 'none';\r\n        } else {\r\n          task.style.display = 'block';\r\n        }\r\n      }\r\n    } else if (completedRadioBtn.checked) {\r\n      for (let task of filteredTasks) {\r\n        if (task.querySelector('.sr-only').checked) {\r\n          task.style.display = 'block';\r\n        } else {\r\n          task.style.display = 'none';\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  for (let radio of todoFilterRadios) {\r\n    radio.addEventListener('change', filterTasks);\r\n  }\r\n  \r\n  \r\n\r\n  \r\n\r\n // Call displayTasks to show tasks on load\r\n \r\n displayTasks();\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst toggleButton = document.querySelector('#themeButton');\r\n\r\n\r\nlet currentTheme = localStorage.getItem('theme') || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\r\ndocument.documentElement.setAttribute('data-theme', currentTheme);\r\ntoggleButton.checked = currentTheme === 'dark';\r\n\r\n\r\n\r\n\r\n//DARK/LIGHT MODE\r\nconst handleToggleTheme = () => {\r\n  currentTheme = currentTheme === 'light' ? 'dark' : 'light';\r\n  document.documentElement.setAttribute('data-theme', currentTheme);\r\n  localStorage.setItem('theme', currentTheme);\r\n};\r\n\r\n\r\ntoggleButton.addEventListener('click', handleToggleTheme);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // other version\r\n// const form = document.getElementById('task-form');\r\n// const taskList = document.querySelector('.todo__tasks');\r\n// const toggleButton = document.querySelector('#themeButton');\r\n// const input = document.getElementById('new-todo');\r\n\r\n// const taskDeleteBtnClass = 'deleteButton';\r\n// const taskItemClass = 'todo__task';\r\n// const taskCheckboxClass = 'sr-only';\r\n// const taskLabelClass = 'customCheckbox';\r\n// const taskTextareaClass = 'taskDescription';\r\n// const taskTextareaRows = 1;\r\n// const taskDeleteBtnLabel = 'Delete todo task';\r\n\r\n// let currentTheme = localStorage.getItem('theme') || (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\r\n// document.documentElement.setAttribute('data-theme', currentTheme);\r\n// toggleButton.checked = currentTheme === 'dark';\r\n\r\n// var tasks = [];\r\n\r\n// const autoSizeInput = element => {\r\n//   element.style.height = 'auto';\r\n//   element.style.height = `${element.scrollHeight}px`;\r\n// };\r\n\r\n// function saveTasks() {\r\n//   localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n// }\r\n\r\n// const addTask = taskDescription => {\r\n//   if (!taskDescription) return;\r\n\r\n//   const taskId = `task${tasks.length + 1}`;\r\n\r\n//   const taskItem = document.createElement('li');\r\n//   taskItem.classList.add(taskItemClass, 'flex');\r\n\r\n//   const taskCheckbox = document.createElement('input');\r\n//   taskCheckbox.setAttribute('type', 'checkbox');\r\n//   taskCheckbox.classList.add(taskCheckboxClass);\r\n//   taskCheckbox.id = taskId;\r\n\r\n//   const taskLabel = document.createElement('label');\r\n//   taskLabel.htmlFor = taskId;\r\n//   taskLabel.classList.add(taskLabelClass);\r\n\r\n//   const taskTextarea = document.createElement('textarea');\r\n//   taskTextarea.classList.add(taskTextareaClass);\r\n//   taskTextarea.id = `taskDescription${tasks.length + 1}`;\r\n//   taskTextarea.contentEditable = true;\r\n//   taskTextarea.rows = taskTextareaRows;\r\n//   taskTextarea.setAttribute('aria-label', `Task ${tasks.length + 1} description`);\r\n\r\n//   const task = {\r\n//     id: taskId,\r\n//     description: taskDescription,\r\n//     completed: false\r\n//   };\r\n//   taskTextarea.textContent = task.description;\r\n\r\n//   // Add event listener to save edited task\r\n//   taskTextarea.addEventListener('input', event => {\r\n//     const taskId = event.target.parentNode.parentNode.querySelector('input').id;\r\n//     const index = tasks.findIndex(task => task.id === taskId);\r\n//     tasks[index].description = taskTextarea.value;\r\n//     saveTasks();\r\n//   });\r\n\r\n//   const taskDeleteBtn = document.createElement('button');\r\n//   taskDeleteBtn.classList.add(taskDeleteBtnClass);\r\n//   taskDeleteBtn.type = 'button';\r\n//   taskDeleteBtn.setAttribute('aria-label', taskDeleteBtnLabel);\r\n\r\n//   taskLabel.appendChild(taskTextarea);\r\n//   taskItem.appendChild(taskCheckbox);\r\n//   taskItem.appendChild(taskLabel);\r\n//   taskItem.appendChild(taskDeleteBtn);\r\n//   taskList.appendChild(taskItem);\r\n\r\n//   tasks.push(task);\r\n//   saveTasks();\r\n\r\n//   // Add event listener to the delete button to remove the task when clicked\r\n//   taskDeleteBtn.addEventListener('click', () => {\r\n//     taskItem.remove();\r\n//     const index = tasks.findIndex(task => task.id === taskCheckbox.id);\r\n//     tasks.splice(index, 1);\r\n//     saveTasks();\r\n//   });\r\n// };\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function renderTasks() {\r\n//   taskList.innerHTML = '';\r\n\r\n//   for (let i = 0; i < tasks.length; i++) {\r\n//     const taskItem = document.createElement('li');\r\n//     taskItem.classList.add(taskItemClass, 'flex');\r\n\r\n//     const taskCheckbox = document.createElement('input');\r\n//     taskCheckbox.setAttribute('type', 'checkbox');\r\n//     taskCheckbox.classList.add(taskCheckboxClass);\r\n//     taskCheckbox.id = `task${i + 1}`;\r\n\r\n//     const taskLabel = document.createElement('label');\r\n//     taskLabel.htmlFor = `task${i + 1}`;\r\n//     taskLabel.classList.add(taskLabelClass);\r\n\r\n//     const taskTextarea = document.createElement('textarea');\r\n//     taskTextarea.classList.add(taskTextareaClass);\r\n//     taskTextarea.id = `taskDescription${i + 1}`;\r\n//     taskTextarea.contentEditable = true;\r\n//     taskTextarea.rows = taskTextareaRows;\r\n//     taskTextarea.setAttribute('aria-label', `Task ${i + 1} description`);\r\n//     taskTextarea.textContent = tasks[i].description;\r\n\r\n//     const taskDeleteBtn = document.createElement('button');\r\n//     taskDeleteBtn.classList.add(taskDeleteBtnClass);\r\n//     taskDeleteBtn.type = 'button';\r\n//     taskDeleteBtn.setAttribute('aria-label', taskDeleteBtnLabel);\r\n\r\n//     taskLabel.appendChild(taskTextarea);\r\n//     taskItem.appendChild(taskCheckbox);\r\n//     taskItem.appendChild(taskLabel);\r\n//     taskItem.appendChild(taskDeleteBtn);\r\n//     taskList.appendChild(taskItem);\r\n\r\n//     // Add event listener to the delete button to remove the task when clicked\r\n//     taskDeleteBtn.addEventListener('click', () => {\r\n//       tasks.splice(i, 1);\r\n//       saveTasks();\r\n//       renderTasks();\r\n//     });\r\n//   }\r\n// }\r\n\r\n\r\n// function loadTasks() {\r\n//   var savedTasks = localStorage.getItem(\"tasks\");\r\n//   if (savedTasks) {\r\n//     tasks = JSON.parse(savedTasks);\r\n//     renderTasks();\r\n//   }\r\n// }\r\n\r\n\r\n\r\n// const handleSubmit = event => {\r\n//   event.preventDefault();\r\n//   const taskDescription = input.value.trim();\r\n//   addTask(taskDescription);\r\n//   input.value = '';\r\n//   autoSizeInput(input);\r\n// };\r\n\r\n// const handleKeyDown = event => {\r\n//   if (event.key === 'Enter') {\r\n//     event.preventDefault();\r\n//     form.dispatchEvent(new Event('submit'));\r\n//   }\r\n// };\r\n\r\n// const handleToggleTheme = () => {\r\n//   currentTheme = currentTheme === 'light' ? 'dark' : 'light';\r\n//   document.documentElement.setAttribute('data-theme', currentTheme);\r\n//   localStorage.setItem('theme', currentTheme);\r\n// };\r\n\r\n// input.addEventListener('input', () => autoSizeInput(input));\r\n// taskList.addEventListener('input', event => autoSizeInput(event.target.closest(`.${taskItemClass}`).querySelector(`.${taskTextareaClass}`)));\r\n// form.addEventListener('submit', handleSubmit);\r\n// input.addEventListener('keydown', handleKeyDown);\r\n// toggleButton.addEventListener('click', handleToggleTheme);\r\n\r\n// window.addEventListener('load', loadTasks);\r\n\r\n\r\n"]}